<?php
/**
 * VivaMVC
 *
 * Copyright (c) 2010, Joscha Meyer <schnipseljagd@googlemail.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   * Neither the name of Joscha Meyer nor the names of his
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    Vmvc
 * @author     Joscha Meyer <schnipseljagd@googlemail.com>
 * @copyright  2010 Joscha Meyer <schnipseljagd@googlemail.com>
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @since
 */

require_once 'tests/VmvcTestCase.php';
require_once 'Vmvc/Response.php';

/**
 * Test class for Vmvc_Response.
 * Generated by PHPUnit on 2010-03-26 at 09:44:34.
 */
class Vmvc_ResponseTest extends VmvcTestCase
{
    /**
     * @var Vmvc_Response
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Vmvc_Response();
    }

    public function testSetContentType()
    {
        $this->object->setContentType('test');
        return $this->object;
    }

    /**
     * @depends testSetContentType
     */
    public function testGetContentType(Vmvc_Response $object)
    {
        $contentType = $object->getContentType();
        $this->assertSame('test', $contentType);
    }

    public function testSetContentTypeIsNotAString()
    {
        $this->object->setContentType(12);
        $contentType = $this->object->getContentType();
        $this->assertSame('12', $contentType);
    }

    public function testGetContentSubType()
    {
        $this->object->setContentType('text/html');
        $contentSubType = $this->object->getContentSubType();
        $this->assertEquals('html', $contentSubType);
    }

    public function testSetCharset()
    {
        $this->object->setCharset('test');
        return $this->object;
    }

    /**
     * @depends testSetCharset
     */
    public function testGetCharset(Vmvc_Response $object)
    {
        $charset = $object->getCharset();
        $this->assertSame('test', $charset);
    }

    public function testSetCharsetTypeIsNotAString()
    {
        $this->object->setCharset(12);
        $charset = $this->object->getCharset();
        $this->assertSame('12', $charset);
    }

    /**
     *
     */
    public function testAddHeader()
    {
        try {
            $this->object->addHeader('test');
        } catch (InvalidArgumentException $exc) {
            $this->fail();
        }
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testAddHeaderIsNotAString()
    {
        $this->object->addHeader(1);
    }


    public function testGetheaders()
    {
        $this->object->addHeader('test1');
        $this->object->addHeader('test2');

        $headers = $this->object->getHeaders();
        $this->assertEquals(
                   array('Content-Type: text/html; charset=utf-8', 'test1',
                         'test2'),
                   $headers);
    }

    public function testGetHeadersWithoutDefaults()
    {
        $this->object->addHeader('test1');
        $this->object->addHeader('test2');

        $headers = $this->object->getHeaders(false);
        $this->assertEquals(array('test1', 'test2'), $headers);
    }

    public function testClearHeaders()
    {
        $this->object->addHeader('test1');

        $this->object->clearHeaders();

        $headers = $this->object->getHeaders();

        $this->assertEquals(array('Content-Type: text/html; charset=utf-8'), $headers);
    }

    public function testSetData()
    {
        $this->object->setData('test', 'testValue');
        return $this->object;
    }

    /**
     * @depends testSetData
     */
    public function testGetData(Vmvc_Response $object)
    {
        $data = $object->getData('test');
        $this->assertEquals('testValue', $data);
    }

    public function testGetDataNameWasNotFound()
    {
        $this->assertNull($this->object->getData('test'));
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testSetDataArgumentIsNotAString()
    {
        $this->object->setData(1, 'testValue');
    }
}
?>
