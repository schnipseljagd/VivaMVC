<?php
/**
 * VivaMVC
 *
 * Copyright (c) 2010, Joscha Meyer <schnipseljagd@googlemail.com>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   * Neither the name of Joscha Meyer nor the names of his
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @package    Vmvc
 * @author     Joscha Meyer <schnipseljagd@googlemail.com>
 * @copyright  2010 Joscha Meyer <schnipseljagd@googlemail.com>
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @since
 */

require_once 'tests/VmvcTestCase.php';

/**
 * Test class for Vmvc_FrontController.
 * Generated by PHPUnit on 2010-03-26 at 09:42:49.
 * 
 */
class Vmvc_FrontControllerTest extends VmvcTestCase
{
    /**
     * @var Vmvc_FrontController
     */
    protected $object;

    protected $appControllerMock;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->appControllerMock = $this->getMockWithoutDependencies(
            'Vmvc_ApplicationController'
        );

        $this->object = new Vmvc_FrontController($this->appControllerMock);
    }

    public function testExecuteWithSuccess()
    {
        $this->loadAppControllerStubs();

        // build actioncontroller mock
        $controllerMock = $this->getMockWithoutDependencies(
            'Vmvc_Controller'
        );

        $controllerMock->expects($this->any())
                       ->method('execute')
                       ->will($this->returnValue(true));

        // build controller factory mock
        $controllerFactoryMock = $this->getControllerFactoryMock(
            $controllerMock
        );

        // build view mock
        $viewMock = $this->getSuccessViewMock();

        // test
        $return = $this->object->execute($controllerFactoryMock, $viewMock);
        $this->assertEquals($return, 'success');
    }

    public function testExecuteWithError()
    {
        $this->appControllerMock->expects($this->any())
                                ->method('getController')
                                ->will($this->returnValue('test'));
        
        $this->appControllerMock->expects($this->any())
                                ->method('getViewScript')
                                ->with($this->equalTo(false))
                                ->will($this->returnValue('error.php'));

        // build controller mock
        $controllerMock = $this->getMockWithoutDependencies('Vmvc_Controller');

        $controllerMock->expects($this->any())
                       ->method('execute')
                       ->will($this->returnValue(false));

        // build controller factory mock
        $controllerFactoryMock = $this->getControllerFactoryMock(
            $controllerMock
        );

        // build view mock
        $viewMock = $this->getErrorViewMock();

        $return = $this->object->execute($controllerFactoryMock, $viewMock);
        $this->assertEquals($return, 'error');
    }

    public function testExecuteWithActionSuccess()
    {
        $this->loadAppControllerStubs();

        // build controller mock
        $controllerMock = $this->getActionControllerMock();

        // build controller factory mock
        $controllerFactoryMock = $this->getControllerFactoryMock(
            $controllerMock
        );

        // build view mock
        $viewMock = $this->getSuccessViewMock();

        // test
        $return = $this->object->execute($controllerFactoryMock, $viewMock);
        $this->assertEquals($return, 'success');
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testExecuteActionHasToBeAStringAndShouldNotBeEmpty()
    {
        $this->appControllerMock->expects($this->any())
                                ->method('getController')
                                ->will($this->returnValue('test'));

        $this->appControllerMock->expects($this->any())
                                ->method('getAction')
                                ->will($this->returnValue(1));

        // build actioncontroller mock
        $controllerMock = $this->getActionControllerMock();

        // build controller factory mock
        $controllerFactoryMock = $this->getMockWithoutDependencies(
            'Vmvc_ControllerFactory'
        );

        $controllerFactoryMock->expects($this->any())
                              ->method('getController')
                              ->with($this->equalTo('test'))
                              ->will($this->returnValue($controllerMock));

        // build view mock
        $viewMock = $this->getMockWithoutDependencies('Vmvc_View');

        // test
        $this->object->execute($controllerFactoryMock, $viewMock);
    }

    protected function getActionControllerMock()
    {
        $controllerMock = $this->getMockWithoutDependencies(
            'Vmvc_ActionController'
        );
        $controllerMock->expects($this->any())
                       ->method('execute')
                       ->will($this->returnValue(true));
        
        return $controllerMock;
    }

    protected function getControllerFactoryMock($controllerMock)
    {
        $controllerFactoryMock = $this->getMockWithoutDependencies(
            'Vmvc_ControllerFactory'
        );

        $controllerFactoryMock->expects($this->any())
                              ->method('getController')
                              ->with($this->equalTo('test'))
                              ->will($this->returnValue($controllerMock));
        return $controllerFactoryMock;
    }

    protected function getSuccessViewMock()
    {
        $viewMock = $this->getMockWithoutDependencies('Vmvc_View');
        $viewMock->expects($this->any())
                 ->method('render')
                 ->with($this->equalTo('index/index.php'))
                 ->will($this->returnValue('success'));

        return $viewMock;
    }

    protected function getErrorViewMock()
    {
        $viewMock = $this->getMockWithoutDependencies('Vmvc_View');
        $viewMock->expects($this->any())
                 ->method('render')
                 ->with($this->equalTo('error.php'))
                 ->will($this->returnValue('error'));
        return $viewMock;
    }

    protected function loadAppControllerStubs()
    {
        $this->appControllerMock->expects($this->any())
                                ->method('getController')
                                ->will($this->returnValue('test'));
        $this->appControllerMock->expects($this->any())
                                ->method('getAction')
                                ->will($this->returnValue('index'));

        $this->appControllerMock->expects($this->any())
                                ->method('getViewScript')
                                ->with($this->equalTo(true))
                                ->will($this->returnValue('index/index.php'));
    }
}
?>
